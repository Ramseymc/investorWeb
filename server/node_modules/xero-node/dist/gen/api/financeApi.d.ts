/**
 * Xero Finance API
 * The Finance API is a collection of endpoints which customers can use in the course of a loan application, which may assist lenders to gain the confidence they need to provide capital.
 *
 * The version of the OpenAPI document: 2.16.4
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference types="node" />
import http = require('http');
import { AccountUsageResponse } from '../model/finance/accountUsageResponse';
import { BalanceSheetResponse } from '../model/finance/balanceSheetResponse';
import { CashValidationResponse } from '../model/finance/cashValidationResponse';
import { CashflowResponse } from '../model/finance/cashflowResponse';
import { LockHistoryResponse } from '../model/finance/lockHistoryResponse';
import { ProfitAndLossResponse } from '../model/finance/profitAndLossResponse';
import { ReportHistoryResponse } from '../model/finance/reportHistoryResponse';
import { TrialBalanceResponse } from '../model/finance/trialBalanceResponse';
import { UserActivitiesResponse } from '../model/finance/userActivitiesResponse';
import { Authentication } from '../model/finance/models';
import { OAuth } from '../model/finance/models';
export declare enum FinanceApiApiKeys {
}
export declare class FinanceApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected binaryHeaders: any;
    protected authentications: {
        default: Authentication;
        OAuth2: OAuth;
    };
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: FinanceApiApiKeys, value: string): void;
    set accessToken(token: string);
    /**
     * A summary of how each account is being transacted on exposing the level of detail and amounts attributable to manual adjustments.
     * @summary Get account usage
     * @param xeroTenantId Xero identifier for Tenant
     * @param startMonth date, yyyy-MM                 If no parameter is provided, the month 12 months prior to the end month will be used.                Account usage for up to 12 months from this date will be returned.
     * @param endMonth date, yyyy-MM                 If no parameter is provided, the current month will be used.                Account usage for up to 12 months prior to this date will be returned.
     */
    getAccountingActivityAccountUsage(xeroTenantId: string, startMonth?: string, endMonth?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: AccountUsageResponse;
    }>;
    /**
     * Provides a history of locking of accounting books. Locking may be an indicator of good accounting practices that could reduce the risk of changes to accounting records in prior periods.
     * @summary Get lock history
     * @param xeroTenantId Xero identifier for Tenant
     * @param endDate date, yyyy-MM-dd                 If no parameter is provided, the current date will be used.                Lock History for up to 12 months before this date will be returned.
     */
    getAccountingActivityLockHistory(xeroTenantId: string, endDate?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: LockHistoryResponse;
    }>;
    /**
     * For a specified organisation, provides a summary of all the reports run for a given period, which may be an indicator for good business management and oversight.
     * @summary Get report history
     * @param xeroTenantId Xero identifier for Tenant
     * @param endDate date, yyyy-MM-dd                 If no parameter is provided, the current date will be used.                Reports published up to 12 months before this date will be returned.
     */
    getAccountingActivityReportHistory(xeroTenantId: string, endDate?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ReportHistoryResponse;
    }>;
    /**
     * For a specified organisation, provides a list of all the users registered, and a history of their accounting transactions. Also identifies the existence of an external accounting advisor and the level of interaction.
     * @summary Get user activities
     * @param xeroTenantId Xero identifier for Tenant
     * @param dataMonth date, yyyy-MM                 If no parameter is provided, the month immediately previous to the current month will be used.                The user activities for the specified month will be returned.
     */
    getAccountingActivityUserActivities(xeroTenantId: string, dataMonth?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: UserActivitiesResponse;
    }>;
    /**
     * Summarizes the total cash position for each account for an org
     * @summary Get cash validation
     * @param xeroTenantId Xero identifier for Tenant
     * @param balanceDate date, yyyy-MM-dd     If no parameter is provided, the current date will be used.    The ‘balance date’ will return transactions based on the accounting date entered by the user.  Transactions before the balanceDate will be included.  The user has discretion as to which accounting period the transaction relates to.    The ‘balance date’  will control the latest maximum date of transactions included in the aggregate numbers.  Balance date does not affect the CurrentStatement object, as this will always return the most recent statement before asAtSystemDate (if specified)
     * @param asAtSystemDate date, yyyy-MM-dd     If no parameter is provided, the current date will be used.    The ‘as at’ date will return transactions based on the  creation date.  It reflects the date the transactions were entered into Xero, not the accounting date.  The ‘as at’ date can not be overridden by the user.  This can be used to estimate a ‘historical frequency of reconciliation’.    The ‘as at’ date will affect the current statement in the response, as any candidate statements created after this date will be filtered out.  Thus the current statement returned will be the most recent statement prior to the specified ‘as at’ date.  Be aware that neither the begin date, nor the balance date, will affect the current statement.    Note;  information is only presented when system architecture allows, meaning historical cash validation information will be an estimate. In addition, delete events are not aware of the ‘as at’ functionality in this endpoint, meaning that transactions deleted at the time the API is accessed will be considered to always have been deleted.
     * @param beginDate date, yyyy-MM-dd     If no parameter is provided, the aggregate results will be drawn from the user’s total history.    The ‘begin date’ will return transactions based on the accounting date entered by the user. Transactions after the beginDate will be included.  The user has discretion as to which accounting period the transaction relates to.
     */
    getCashValidation(xeroTenantId: string, balanceDate?: string, asAtSystemDate?: string, beginDate?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<CashValidationResponse>;
    }>;
    /**
     * The balance sheet report is a standard financial report which describes the financial position of an organisation at a point in time.
     * @summary Get Balance Sheet report
     * @param xeroTenantId Xero identifier for Tenant
     * @param balanceDate Specifies the date for balance sheet report.    Format yyyy-MM-dd. If no parameter is provided, the current date will be used.
     */
    getFinancialStatementBalanceSheet(xeroTenantId: string, balanceDate?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: BalanceSheetResponse;
    }>;
    /**
     * The statement of cash flows - direct method, provides the year to date changes in operating, financing and investing cash flow activities for an organisation. Cashflow statement is not available in US region at this stage.
     * @summary Get Cash flow report
     * @param xeroTenantId Xero identifier for Tenant
     * @param startDate Date e.g. yyyy-MM-dd    Specifies the start date for cash flow report.    If no parameter is provided, the date of 12 months before the end date will be used.
     * @param endDate Date e.g. yyyy-MM-dd    Specifies the end date for cash flow report.    If no parameter is provided, the current date will be used.
     */
    getFinancialStatementCashflow(xeroTenantId: string, startDate?: string, endDate?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: CashflowResponse;
    }>;
    /**
     * The profit and loss statement is a standard financial report providing detailed year to date income and expense detail for an organisation.
     * @summary Get Profit & Loss report
     * @param xeroTenantId Xero identifier for Tenant
     * @param startDate Date e.g. yyyy-MM-dd    Specifies the start date for profit and loss report    If no parameter is provided, the date of 12 months before the end date will be used.
     * @param endDate Date e.g. yyyy-MM-dd    Specifies the end date for profit and loss report     If no parameter is provided, the current date will be used.
     */
    getFinancialStatementProfitAndLoss(xeroTenantId: string, startDate?: string, endDate?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ProfitAndLossResponse;
    }>;
    /**
     * The trial balance provides a detailed list of all accounts of an organisation at a point in time, with revenue and expense items being year to date.
     * @summary Get Trial Balance report
     * @param xeroTenantId Xero identifier for Tenant
     * @param endDate Date e.g. yyyy-MM-dd     Specifies the end date for trial balance report     If no parameter is provided, the current date will be used.
     */
    getFinancialStatementTrialBalance(xeroTenantId: string, endDate?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: TrialBalanceResponse;
    }>;
}
